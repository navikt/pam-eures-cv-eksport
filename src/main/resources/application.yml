server:
  port: 9030
  servlet:
    context-path: /pam-eures-cv-eksport

no.nav.security.jwt:
  issuer:
    selvbetjening:
      discoveryurl: ${LOGINSERVICE_IDPORTEN_DISCOVERY_URL:http://metadata}
      accepted_audience: ${LOGINSERVICE_IDPORTEN_AUDIENCE:aud-localhost}
      cookie_name: selvbetjening-idtoken
  client:
    registration:
      pdl:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT:http://localhost:8080/default/token}
        grant-type: client_credentials
        scope: ${PDL_SCOPE:some_scope}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID:dummy}
          client-secret: ${AZURE_APP_CLIENT_SECRET:dummy}
          client-auth-method: client_secret_basic

spring:
  kafka:
    ssl:
      trust-store-location: file:${NAV_TRUSTSTORE_PATH:}
      trust-store-password: ${NAV_TRUSTSTORE_PASSWORD:}
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: pam-eures-cv-eksport-v111
      auto-offset-reset: earliest
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    properties:
      sasl:
        mechanism: PLAIN
        jaas:
          config: no.nav.cv.eures.cv.NaisLoginModule required;
      schema:
        registry:
          url: https://${KAFKA_SCHEMA_REGISTRY:localhost:8081}
      security:
        protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
  datasource:
    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:pam-eures-cv-eksport}
    username: ${DB_USERNAME:pam-eures-cv-eksport}
    password: ${DB_PASSWORD:pam-eures-cv-eksport}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 0
      pool-name: default
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations:
      - "classpath:db"
    connect-retries: 50



kafka:
  aiven:
    topics:
      consumers:
        cv_endret: ${KAFKA_CONSUMER_TOPIC_CV_ENDRET_JSON:teampam.cv-endret-intern-v3}
      brokers: ${KAFKA_BROKERS:localhost}
      securityProtocol: SSL
      certificate: ${KAFKA_CERTIFICATE:cert}
      certificatePath: ${KAFKA_CERTIFICATE_PATH:/dev/zero}
      privateKey: ${KAFKA_PRIVATE_KEY:key}
      privateKeyPath: ${KAFKA_PRIVATE_KEY_PATH:/dev/zero}
      ca: ${KAFKA_CA:ca}
      caPath: ${KAFKA_CA_PATH:/dev/zero}
      keystorePath: ${KAFKA_KEYSTORE_PATH:/dev/zero}
      truststorePath: ${KAFKA_TRUSTSTORE_PATH:/dev/zero}
      credstorePassword: ${KAFKA_CREDSTORE_PASSWORD:pwd}
      schemaRegistry: ${KAFKA_SCHEMA_REGISTRY:pwd}
      schemaUsername: ${KAFKA_SCHEMA_REGISTRY_USER:none}
      schemaPassword: ${KAFKA_SCHEMA_REGISTRY_PASSWORD:none}
  topics:
    consumers:
      cv_endret: ${KAFKA_CONSUMER_TOPIC_CV_ENDRET:arbeid-pam-cv-endret-v2-dev}

avro:
  schema.subject: ${KAFKA_CONSUMER_TOPIC_CV_ENDRET:arbeid-pam-cv-endret-v2-dev}-value

jackson:
  serializationInclusion: ALWAYS

eures:
  # base 64 encoded version of default value of token below - for use in local testing with curl or postman or similar:
  # RVVSRVMgc3VwZXIgdGVzdHNlY3JldA==
  token: ${EURES_TOKEN:EURES super testsecret}

janzz:
  authorization:
    token: ${JANZZ_AUTH_TOKEN:dumytoken}
  labels:
    host: https://www.janzz.jobs
    resultLimit: 200

management:
  endpoint:
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: prometheus
    enabled-by-default: false

featureToggle:
  internTopicOn: true
