plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "application"
    id "org.springframework.boot" version "2.4.0"
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
}

version "0.1"
group "no.nav.cv.eures"
sourceCompatibility = '1.14'

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://github-package-registry-mirror.gc.nav.no/cached/maven-release" }}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "javax.annotation:javax.annotation-api"
    implementation "org.apache.avro:avro:${avroVersion}"
    //implementation "org.apache.kafka:kafka-clients"
    implementation "no.nav:vault-jdbc:latest.release"
    implementation "net.logstash.logback:logstash-logback-encoder:6.2"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"

    implementation "no.nav.arbeid.pam:pam-cv-avro-cvmeldinger:46"


    // SNYK fixes
    implementation "org.dom4j:dom4j:2.1.3"
    implementation "org.postgresql:postgresql:42.2.13"
    implementation "org.hibernate:hibernate-core:5.4.18.Final"

    implementation("org.springframework.kafka:spring-kafka")
    implementation("org.projectreactor:reactor-spring:1.0.1.RELEASE")

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    runtimeOnly "com.h2database:h2"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation "no.nav.security:token-validation-spring:${tokenSupportVersion}"
    implementation "com.nimbusds:nimbus-jose-jwt:8.20"
    implementation "net.minidev:json-smart:2.3"
    testImplementation "no.nav.security:token-validation-test-support:${tokenSupportVersion}"

    // TODO - Remove temporary use of jwt implementation
    implementation 'com.auth0:java-jwt:3.11.0'

    implementation "org.flywaydb:flyway-core"

    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
    testImplementation "com.h2database:h2"

    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.5.13'

}

test.classpath += configurations.developmentOnly

mainClassName = "no.nav.cv.eures.ApplicationKt"

test {
    useJUnitPlatform()
}

//allOpen {
//	annotation("io.micronaut.aop.Around")
//}
//shadowJar {
//    mergeServiceFiles()
//}
compileKotlin {
	kotlinOptions {
	    jvmTarget = '1.8'
	    //Will retain parameter names for Java reflection
	    javaParameters = true
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '1.8'
	    javaParameters = true
	}
}

tasks.withType(JavaExec) {
    classpath += test.classpath
    if (System.getenv('RUN_LOCAL') != null)
        jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dspring.profiles.active=local-docker')
    else
        jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
